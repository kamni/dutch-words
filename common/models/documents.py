"""
Copyright (C) J Leadbetter <j@jleadbetter.com>
Affero GPL v3
"""

import uuid
from typing import List, Optional

from pydantic import BaseModel

from .base import HashableMixin
from .users import UserDB, UserUI
from ..utils.languages import LanguageCode


class DocumentBase(HashableMixin):
    """
    Shared base class for both Pydantic and Django models for the database.

    Must implement the following fields:

    * id
    * user (with user.id)
    * language_code
    """
    pass


class DocumentDBMinimal(DocumentBase, BaseModel):
    """
    Minimal representation of a document in the database
    """

    id: uuid.UUID
    user_id: uuid.UUID
    display_name: str
    language_code: LanguageCode


class DocumentDB(DocumentBase, BaseModel):
    """
    Representation of a document to be stored in the database
    """

    id: Optional[uuid.UUID] = None  # UUID. Generated by the database.
    user_id: uuid.UUID
    display_name: str
    language_code: LanguageCode
    doc_file: str  # Relative path in file system
    translations: Optional[List['DocumentDB']] = None

    @property
    def unique_fields(self):
        return ['user_id', 'display_name', 'language_code']


class DocumentUIMinimal(DocumentBase, BaseModel):
    """
    Bare minimum display of documents in the UI
    Excludes Sentences and Words
    """

    id: uuid.UUID
    user: UserUI
    displayName: str
    languageCode: LanguageCode

    @classmethod
    def from_db(
        cls,
        document: DocumentDB,
        user: UserDB,
    ) -> 'DocumentUIMinimal':
        """
        Convert a DocumentDB into a DocumentUIMinimal
        """

        user_ui = UserUI.from_db(user)
        document_ui = cls(
            id=document.id,
            user=user_ui,
            displayName=document.display_name,
            languageCode=document.language_code,
        )
        return document_ui
